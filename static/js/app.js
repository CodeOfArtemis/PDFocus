import * as pdfjsLib from 'https://mozilla.github.io/pdf.js/build/pdf.mjs';

pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://mozilla.github.io/pdf.js/build/pdf.worker.mjs';

document.addEventListener('DOMContentLoaded', function() {
    const loginForm = document.getElementById('login-form');

    if (loginForm) {
        loginForm.addEventListener('submit', function(e) {
        });
    }
});

// –¢–µ–∫—É—â–∏–π PDF
let currentPdf = null;
let currentPage = 1;
let totalPages = 1;
let currentDocumentId = null;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PDF.js
function checkPdfJsAvailability() {
    if (typeof pdfjsLib === 'undefined') {
        console.error('PDF.js is not loaded! PDF preview will not work.');
        return false;
    }
    console.log('PDF.js is available, version:', pdfjsLib.version || 'unknown');
    return true;
}

// Fallback –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è PDF –±–µ–∑ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
function showPdfFallback(url) {
    console.log("Using PDF fallback for URL:", url);
    
    const viewer = document.getElementById('pdf-viewer');
    if (viewer) {
        viewer.innerHTML = `
            <div class="pdf-placeholder" style="display: flex;">
                <i>üìÑ</i>
                <h3>PDF –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ</h3>
                <p>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. <a href="${url}" target="_blank">–û—Ç–∫—Ä—ã—Ç—å PDF –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ</a></p>
            </div>
        `;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
    const controls = document.getElementById('pdf-controls');
    if (controls) {
        controls.style.display = 'flex';
        const pageNum = document.getElementById('page-num');
        if (pageNum) pageNum.textContent = 'PDF –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É';
    }
}

document.addEventListener('DOMContentLoaded', function() {
    console.log("DOM loaded, initializing application...");
    
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ PDF.js
    setTimeout(() => {
        console.log("=== PDF.js Diagnostic ===");
        console.log("typeof pdfjsLib:", typeof pdfjsLib);
        if (typeof pdfjsLib !== 'undefined') {
            console.log("PDF.js version:", pdfjsLib.version);
            console.log("Worker src:", pdfjsLib.GlobalWorkerOptions.workerSrc);
        } else {
            console.error("‚ùå PDF.js is not loaded!");
        }
        console.log("========================");
    }, 1000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    
    initDragAndDrop();
    initPdfNavigation();
    initNoteForm();
    initDetailPagePdf();
    initSearch();
});

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —à–∞–±–ª–æ–Ω–∞—Ö
window.initDetailPagePdf = initDetailPagePdf;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drag-and-drop
function initDragAndDrop() {
    const uploadArea = document.getElementById('upload-area');
    const pdfUpload = document.getElementById('pdf-upload');

    if (uploadArea) {
        uploadArea.addEventListener('dragover', function(e) {
            e.preventDefault();
            uploadArea.classList.add('dragover');
        });

        uploadArea.addEventListener('dragleave', function() {
            uploadArea.classList.remove('dragover');
        });

        uploadArea.addEventListener('drop', function(e) {
            e.preventDefault();
            uploadArea.classList.remove('dragover');
            handleFiles(e.dataTransfer.files);
        });
    }

    if (pdfUpload) {
        pdfUpload.addEventListener('change', function() {
            if (pdfUpload.files.length) {
                handleFiles(pdfUpload.files);
            }
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
function handleFiles(files) {
    const formData = new FormData();
    let hasPdf = false;

    for (let i = 0; i < files.length; i++) {
        if (files[i].type === 'application/pdf') {
            formData.append('file', files[i]);
            formData.append('title', files[i].name);
            formData.append('doc_type', 'other');
            formData.append('authors', '');
            formData.append('theme', '');
            formData.append('keywords', '');
            hasPdf = true;
        }
    }

    if (!hasPdf) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF-—Ñ–∞–π–ª');
        return;
    }

    const csrfToken = document.querySelector('[name=csrfmiddlewaretoken]').value;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    fetch(`${window.location.origin}/upload/`, {
        method: 'POST',
        body: formData,
        headers: {
            'X-CSRFToken': csrfToken,
        },
        credentials: 'same-origin'
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(data => {
                throw new Error(data.error || `HTTP error! status: ${response.status}`);
            });
        }
            return response.json();
    })
    .then(data => {

        if (data.success) {
            currentDocumentId = data.document_id;
            const openButton = document.getElementById('open-pdf');
            if (openButton) {
                const detailUrl = `${window.location.origin}/detailed/${data.document_id}`;
                openButton.href = detailUrl;
                openButton.style.display = 'block';


                            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
            setTimeout(() => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                const viewer = document.getElementById('pdf-viewer');
                const controls = document.getElementById('pdf-controls');
                const placeholder = document.getElementById('pdf-placeholder');
                

                
                if (viewer && controls && placeholder) {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
                controls.style.display = 'none';
                placeholder.style.display = 'flex';
                viewer.innerHTML = '';
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º PDF
                loadPdf(data.file_url).catch(error => {
                    console.error("Error loading PDF for preview:", error);
                    console.log("PDF URL that failed:", data.file_url);
                    
                    // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π iframe viewer
                    try {
                        if (typeof window.showSimplePdfViewer === 'function') {
                            window.showSimplePdfViewer(data.file_url);
                            console.log("Simple PDF viewer loaded successfully");
                        } else {
                            showPdfFallback(data.file_url);
                            console.log("PDF fallback displayed successfully");
                        }
                    } catch (fallbackError) {
                        console.error("Fallback also failed:", fallbackError);
                        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –ø—Ä–æ–≤–∞–ª–µ
                        controls.style.display = 'none';
                        placeholder.style.display = 'flex';
                        viewer.innerHTML = '';
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω
                        alert('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ.');
                    }
                });
                } else {
                    console.log("No PDF viewer elements on this page. Skipping preview.");
                }
            }, 100); // –ó–∞–¥–µ—Ä–∂–∫–∞ 100–º—Å
            } else {
                console.error("Open button not found");
            }
        } else {
            throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: ' + error.message);
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ PDF –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
async function loadPdf(url) {

    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const viewer = document.getElementById('pdf-viewer');
    const controls = document.getElementById('pdf-controls');
    const placeholder = document.getElementById('pdf-placeholder');
    

    
    if (!viewer || !controls || !placeholder) {
        console.log("PDF viewer elements not found on this page. Skipping PDF.js loading.");
        throw new Error('PDF viewer elements not available on this page');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å PDF.js
    if (!checkPdfJsAvailability()) {
        throw new Error('PDF.js is not available');
    }
    
    try {
        const pdf = await pdfjsLib.getDocument(url).promise;
        
        currentPdf = pdf;
        totalPages = pdf.numPages;
        currentPage = 1;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã –∏ —Å–∫—Ä—ã–≤–∞–µ–º placeholder
            controls.style.display = 'flex';
            placeholder.style.display = 'none';
            await renderPage(1);
        
    } catch (error) {
        console.error("Detailed error loading PDF:", error);
        console.error("Error type:", error.name);
        console.error("Error message:", error.message);
        if (error.stack) console.error("Error stack:", error.stack);
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º placeholder –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        if (controls) controls.style.display = 'none';
        if (placeholder) placeholder.style.display = 'flex';
        
        throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    }
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã PDF
function renderPage(pageNum) {
    if (!currentPdf) return;

    currentPdf.getPage(pageNum).then(function(page) {
        const viewer = document.getElementById('pdf-viewer');
        if (!viewer) return;
        
        // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ viewer'–∞
        viewer.innerHTML = '';

        const scale = 1.5;
        const viewport = page.getViewport({ scale: scale });

        const canvas = document.createElement('canvas');
        const context = canvas.getContext('2d');
        canvas.style.position = 'relative';
        canvas.style.zIndex = '1';
        canvas.height = viewport.height;
        canvas.width = viewport.width;

        viewer.appendChild(canvas);

        page.render({
            canvasContext: context,
            viewport: viewport
        });

        const pageNumElement = document.getElementById('page-num');
        if (pageNumElement) {
            pageNumElement.textContent = `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNum} –∏–∑ ${totalPages}`;
        }
    }).catch(error => {
        console.error('Error rendering page:', error);
    });
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º PDF
function initPdfNavigation() {
    document.getElementById('prev-page')?.addEventListener('click', function() {
        if (currentPage > 1) {
            currentPage--;
            renderPage(currentPage);
        }
    });

    document.getElementById('next-page')?.addEventListener('click', function() {
        if (currentPage < totalPages) {
            currentPage++;
            renderPage(currentPage);
        }
    });

    document.getElementById('close-pdf')?.addEventListener('click', function() {
        // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        currentPdf = null;
        currentPage = 1;
        totalPages = 1;
        currentDocumentId = null;
        
        // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        const viewer = document.getElementById('pdf-viewer');
        if (viewer) viewer.innerHTML = '';
        
        const controls = document.getElementById('pdf-controls');
        if (controls) controls.style.display = 'none';
        
        const placeholder = document.getElementById('pdf-placeholder');
        if (placeholder) placeholder.style.display = 'flex';
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ"
        const openButton = document.getElementById('open-pdf');
        if (openButton) openButton.style.display = 'none';
    });
}

// –†–∞–±–æ—Ç–∞ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
function initNoteForm() {
    const noteForm = document.getElementById('note-form');
    if (!noteForm) return;

    document.getElementById('add-note-btn')?.addEventListener('click', function() {
        noteForm.style.display = 'block';
        document.getElementById('note-text').focus();
    });

    document.getElementById('cancel-note')?.addEventListener('click', function() {
        noteForm.style.display = 'none';
        document.getElementById('note-text').value = '';
    });

    document.getElementById('save-note')?.addEventListener('click', saveNote);
}

function saveNote() {
    const noteText = document.getElementById('note-text').value.trim();
    if (!noteText) return;

    const formData = new FormData();
    formData.append('text', noteText);
    formData.append('document_id', document.getElementById('pdf-id').value);
    formData.append('page_number', currentPage);

    fetch(`${window.location.origin}/save-note/`, {
        method: 'POST',
        body: formData,
        headers: {
            'X-CSRFToken': document.getElementsByName('csrfmiddlewaretoken').item(0).value,
            'X-Requested-With': 'XMLHttpRequest',
        }
    }).then(response => {
        if (response.ok) {
            return response.json();
        }
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏');
    }).then(data => {
        if (data.success) {
            addNoteToUI(data.note);
            document.getElementById('note-form').style.display = 'none';
            document.getElementById('note-text').value = '';
        }
    }).catch(error => {
        console.error('Error:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏');
    });
}

function addNoteToUI(note) {
    const notesContainer = document.querySelector('.notes-list');
    if (!notesContainer) return;

    const noteElement = document.createElement('div');
    noteElement.className = 'note-item';
    noteElement.innerHTML = `
        <div class="note-text">${note.text}</div>
        <div class="note-meta">–°—Ç—Ä. ${note.page_number} - ${note.created_at}</div>
    `;

    const firstElement = notesContainer.firstChild;
    if (firstElement && firstElement.tagName !== 'P') {
        notesContainer.insertBefore(noteElement, firstElement);
    } else {
        notesContainer.appendChild(noteElement);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PDF –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
function initDetailPagePdf() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    const detailViewer = document.getElementById('pdf-viewer-detail');
    if (!detailViewer) return;

    // –ü–æ–ª—É—á–∞–µ–º URL PDF –∏–∑ —Å–∫—Ä—ã—Ç–æ–≥–æ –ø–æ–ª—è –∏–ª–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const pdfIdElement = document.querySelector('input[name="document_id"]');
    if (!pdfIdElement) return;

    const documentId = pdfIdElement.value;
    // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å URL —Ñ–∞–π–ª–∞, –≤–æ–∑–º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ AJAX –∏–ª–∏ –≤—Å—Ç—Ä–æ–∏—Ç—å –≤ —à–∞–±–ª–æ–Ω
    loadDetailPdf(documentId);
    initDetailPdfNavigation();
    initDetailNoteForm();
    initDetailMetaForm();
    initDetailNoteDelete();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ PDF –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
async function loadDetailPdf(documentId) {
    const pdfUrlElement = document.getElementById('pdf-file-url');
    if (!pdfUrlElement) {
        console.error('PDF URL not found');
        return;
    }
    
    const pdfUrl = pdfUrlElement.value;
    console.log("Loading detail PDF from URL:", pdfUrl);
    
    try {
        const pdf = await pdfjsLib.getDocument(pdfUrl).promise;
        window.currentDetailPdf = pdf;
        window.currentDetailPage = 1;
        window.totalDetailPages = pdf.numPages;

        const placeholder = document.getElementById('pdf-placeholder-detail');
        if (placeholder) {
            placeholder.style.display = 'none';
        }

        await renderDetailPage(1);
        updateDetailPageInfo();
        updateNotePageNumber();
    } catch (error) {
        console.error("Error loading detail PDF:", error);
        const placeholder = document.getElementById('pdf-placeholder-detail');
        if (placeholder) {
            placeholder.innerHTML = '<i>‚ùå</i><p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF</p>';
        }
    }
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
async function renderDetailPage(pageNum) {
    if (!window.currentDetailPdf) return;

    try {
        const page = await window.currentDetailPdf.getPage(pageNum);
        const viewer = document.getElementById('pdf-viewer-detail');
        viewer.innerHTML = '';

        const scale = 1.2;
        const viewport = page.getViewport({ scale: scale });

        const canvas = document.createElement('canvas');
        const context = canvas.getContext('2d');
        canvas.height = viewport.height;
        canvas.width = viewport.width;
        canvas.style.maxWidth = '100%';
        canvas.style.height = 'auto';

        viewer.appendChild(canvas);

        await page.render({
            canvasContext: context,
            viewport: viewport
        }).promise;

        window.currentDetailPage = pageNum;
        updateDetailPageInfo();
        updatePageText(pageNum);
    } catch (error) {
        console.error("Error rendering detail page:", error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function updatePageText(pageNum) {
    const textArea = document.querySelector('.extracted-text-section textarea');
    if (!textArea) return;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const pageText = window.pageTexts && window.pageTexts[pageNum] 
        ? window.pageTexts[pageNum] 
        : '–¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω';

    textArea.value = pageText;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
    const textSectionHeader = document.querySelector('.extracted-text-section h3');
    if (textSectionHeader) {
        textSectionHeader.textContent = `–¢–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageNum}:`;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function updateDetailPageInfo() {
    const pageNumElement = document.getElementById('page-num-detail');
    if (pageNumElement) {
        pageNumElement.textContent = `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${window.currentDetailPage || 1} –∏–∑ ${window.totalDetailPages || 1}`;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ —Ñ–æ—Ä–º—ã –∑–∞–º–µ—Ç–æ–∫
    updateNotePageNumber();
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Ñ–æ—Ä–º–µ –∑–∞–º–µ—Ç–æ–∫
function updateNotePageNumber() {
    const pageNumberField = document.getElementById('current_page_number');
    if (pageNumberField && window.currentDetailPage) {
        pageNumberField.value = window.currentDetailPage;
    }
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ PDF
function initDetailPdfNavigation() {
    const prevButton = document.getElementById('prev-page-detail');
    const nextButton = document.getElementById('next-page-detail');
    
    if (prevButton) {
        prevButton.addEventListener('click', function() {
            if (window.currentDetailPage > 1) {
                renderDetailPage(window.currentDetailPage - 1);
            }
        });
    }
    
    if (nextButton) {
        nextButton.addEventListener('click', function() {
            if (window.currentDetailPage < window.totalDetailPages) {
                renderDetailPage(window.currentDetailPage + 1);
            }
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –∑–∞–º–µ—Ç–æ–∫ –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function initDetailNoteForm() {
    const noteForm = document.getElementById('note-form-detail');
    if (!noteForm) return;

    noteForm.addEventListener('submit', function(e) {
        e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã
        saveDetailNote();
    });
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —á–µ—Ä–µ–∑ AJAX
function saveDetailNote() {
    const noteForm = document.getElementById('note-form-detail');
    const noteText = document.getElementById('id_note_text').value.trim();
    
    if (!noteText) {
        alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏');
        return;
    }

    const formData = new FormData(noteForm);

    fetch(`${window.location.origin}/save-note/`, {
        method: 'POST',
        body: formData,
        headers: {
            'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
            'X-Requested-With': 'XMLHttpRequest',
        },
        credentials: 'same-origin'
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏');
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ —Å–ø–∏—Å–æ–∫
            addDetailNoteToUI(data.note);
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É  
            document.getElementById('id_note_text').value = '';
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            showSuccessMessage('–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
        } else {
            throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: ' + error.message);
    });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function addDetailNoteToUI(note) {
    const notesContainer = document.querySelector('.notes-list');
    if (!notesContainer) return;

    // –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫" –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    const noNotesMessage = notesContainer.querySelector('p');
    if (noNotesMessage && noNotesMessage.textContent.includes('–ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫')) {
        noNotesMessage.remove();
    }

    const noteElement = document.createElement('div');
    noteElement.className = 'note-item';
    noteElement.setAttribute('data-note-id', note.id);
    noteElement.innerHTML = `
        <div class="note-content">
            <p class="note-text">${note.text}</p>
            <span class="note-meta">–°—Ç—Ä. ${note.page_number} - ${note.created_at}</span>
        </div>
        <button class="note-delete-btn" data-note-id="${note.id}" title="–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É">‚úï</button>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
    notesContainer.insertBefore(noteElement, notesContainer.firstChild);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
    const deleteBtn = noteElement.querySelector('.note-delete-btn');
    deleteBtn.addEventListener('click', function() {
        deleteDetailNote(note.id, noteElement);
    });
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
function showSuccessMessage(message) {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #28a745;
        color: white;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        z-index: 1000;
        font-weight: 500;
    `;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.remove();
    }, 3000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function initDetailMetaForm() {
    const metaForm = document.getElementById('pdf-meta-form');
    if (!metaForm) return;

    metaForm.addEventListener('submit', function(e) {
        e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã
        saveDetailMetadata();
    });
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö PDF —á–µ—Ä–µ–∑ AJAX
function saveDetailMetadata() {
    const metaForm = document.getElementById('pdf-meta-form');
    if (!metaForm) return;

    const formData = new FormData(metaForm);

    fetch(window.location.href, {
        method: 'POST',
        body: formData,
        headers: {
            'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
            'X-Requested-With': 'XMLHttpRequest',
        },
        credentials: 'same-origin'
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö');
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            showSuccessMessage('–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
        } else {
            throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: ' + error.message);
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
function initDetailNoteDelete() {
    const deleteButtons = document.querySelectorAll('.note-delete-btn');
    console.log('Found delete buttons:', deleteButtons.length);
    
    deleteButtons.forEach(button => {
        button.addEventListener('click', function() {
            const noteId = this.getAttribute('data-note-id');
            const noteElement = this.closest('.note-item');
            
            console.log('Delete button clicked, noteId:', noteId, 'element:', noteElement);
            
            if (!noteId) {
                console.error('No note ID found on button:', this);
                alert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –∑–∞–º–µ—Ç–∫–∏');
                return;
            }
            
            deleteDetailNote(noteId, noteElement);
        });
    });
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ AJAX
function deleteDetailNote(noteId, noteElement) {
    console.log('Attempting to delete note with ID:', noteId);
    
    if (!noteId || noteId === 'undefined') {
        console.error('Invalid note ID:', noteId);
        alert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∑–∞–º–µ—Ç–∫–∏');
        return;
    }
    
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–º–µ—Ç–∫—É?')) {
        return;
    }

    const formData = new FormData();
    
    fetch(`${window.location.origin}/delete-note/${noteId}/`, {
        method: 'POST',
        body: formData,
        headers: {
            'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
            'X-Requested-With': 'XMLHttpRequest',
        },
        credentials: 'same-origin'
    })
    .then(response => {
        console.log('Delete response status:', response.status);
        if (!response.ok) {
            return response.text().then(text => {
                console.error('Server response:', text);
                throw new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ (${response.status})`);
            });
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            // –ü–ª–∞–≤–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –∑–∞–º–µ—Ç–∫—É
            noteElement.style.transition = 'opacity 0.3s ease';
            noteElement.style.opacity = '0';
            
            setTimeout(() => {
                noteElement.remove();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –∑–∞–º–µ—Ç–∫–∏
                const notesContainer = document.querySelector('.notes-list');
                const remainingNotes = notesContainer.querySelectorAll('.note-item');
                
                if (remainingNotes.length === 0) {
                    const noNotesMessage = document.createElement('p');
                    noNotesMessage.textContent = '–ö —ç—Ç–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.';
                    notesContainer.appendChild(noNotesMessage);
                }
            }, 300);
            
            showSuccessMessage('–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!');
        } else {
            throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: ' + error.message);
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
function initSearch() {
    const searchInput = document.querySelector('.search-bar input');
    
    if (!searchInput) return;
    
    let searchTimeout;
    
    // –ü–æ–∏—Å–∫ –ø—Ä–∏ –≤–≤–æ–¥–µ (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)
    searchInput.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        const query = this.value.trim();
        
        if (query.length === 0) {
            showAllDocuments();
            return;
        }
        
        searchTimeout = setTimeout(() => {
            filterDocuments(query);
        }, 300); // –ó–∞–¥–µ—Ä–∂–∫–∞ 300–º—Å
    });
    
    // –ü–æ–∏—Å–∫ –ø–æ Enter
    searchInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            const query = this.value.trim();
            filterDocuments(query);
        }
    });
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function filterDocuments(query) {
    const documentCards = document.querySelectorAll('.pdf-card, .document-card');
    const noResultsElement = document.querySelector('.no-search-results');
    let visibleCount = 0;
    
    if (query.length === 0) {
        showAllDocuments();
        return;
    }
    
    const searchQuery = query.toLowerCase();
    
    documentCards.forEach(card => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º data-–∞—Ç—Ä–∏–±—É—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –±–µ—Ä–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–∞
        const title = card.dataset.searchTitle || card.querySelector('h3, h4')?.textContent?.toLowerCase() || '';
        const authors = card.dataset.searchAuthors || card.querySelector('.pdf-meta span, .document-authors')?.textContent?.toLowerCase() || '';
        const theme = card.dataset.searchTheme || card.querySelector('.document-theme')?.textContent?.toLowerCase() || '';
        const keywords = card.dataset.searchKeywords || card.querySelector('.document-keywords')?.textContent?.toLowerCase() || '';
        
        const isMatch = title.includes(searchQuery) || 
                       authors.includes(searchQuery) || 
                       theme.includes(searchQuery) || 
                       keywords.includes(searchQuery);
        
        if (isMatch) {
            card.style.display = '';
            card.style.opacity = '1';
            visibleCount++;
        } else {
            card.style.display = 'none';
        }
    });
    
    // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    showNoResultsMessage(visibleCount === 0, query);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
function showAllDocuments() {
    const documentCards = document.querySelectorAll('.pdf-card, .document-card');
    const noResultsElement = document.querySelector('.no-search-results');
    
    documentCards.forEach(card => {
        card.style.display = '';
    });
    
    // –°–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    if (noResultsElement) {
        noResultsElement.remove();
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
function showNoResultsMessage(show, query) {
    let noResultsElement = document.querySelector('.no-search-results');
    
    if (show && !noResultsElement) {
        const container = document.querySelector('.catalog-container, .account-files');
        if (container) {
            noResultsElement = document.createElement('div');
            noResultsElement.className = 'no-search-results';
            noResultsElement.innerHTML = `
                <div class="empty-state">
                    <i>üîç</i>
                    <h3>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
                    <p>–ü–æ –∑–∞–ø—Ä–æ—Å—É "${escapeHtml(query)}" –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                </div>
            `;
            container.appendChild(noResultsElement);
        }
    } else if (!show && noResultsElement) {
        noResultsElement.remove();
    }
}

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}
